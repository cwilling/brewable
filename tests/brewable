#!/usr/bin/env python


import sys, os
import time


profiles = []

PROBE_COUNT = 4
SESSION_FILE = 'data/session.bru'

class brewJob:
    def __init__(self):
        self.__steps = []
        self.__timeStarted = 0.0
        self.__timeNow = 0.0
        self.__pfl_name = ''
        self.__control_steps = []

    def set_pfl_name(self, name):
        self.__pfl_name = name

    def get_pfl_name(self):
        return self.__pfl_name

    def load_pfl(self, pfl_file_name):
        try:
            f = open(pfl_file_name, 'r')
        except:
            print "Couldn't open pfl file: %s" % (pfl_file_name)
            sys.exit(3)
        self.__pfl_name = pfl_file_name
        count = 0
        cumulative_time = 0.0
        for line in f:
            # Convert elements to floats
            entry = list(map(float, line.strip().split()))
            cumulative_time += entry[0]
            entry.append(cumulative_time)
            self.__control_steps.append(entry)

        for step in self.__control_steps:
            print "Step %d = %s" % (count,step)
            count += 1

    def set_start_time(self, sometime):
        self.__timeStarted = sometime

    def get_start_time(self):
        return self.__timeStarted

    def target_temperature(self, current_time):
        '''What is the desired temperature at current_time?'''
        elapsed_time = current_time - self.__timeStarted

        # If we're past the last step, return the last temperature target
        if elapsed_time > self.__control_steps[-1][2]:
            return (True, self.__control_steps[-1][1])

        previous_setpoint = self.__control_steps[0]
        #print previous_setpoint
        for step in self.__control_steps:
            if step[2] > elapsed_time:
                # print "At %f, next setpoint at: %f" % (elapsed_time, step[2])
                slope = (step[1] - previous_setpoint[1])/(step[2] - previous_setpoint[2])
                intercept = step[1] - slope*step[2]
                target = slope*elapsed_time + intercept
                return (False, target)
            previous_setpoint = step

def main_setup():
    print "Hello - setting up"

    # Read session file
    try:
        session_file = open(SESSION_FILE, 'r')
    except:
        print "Couldn't open session file"
        sys.exit(1)

    for line in session_file:
        print line,
        try:
            profile = open('data/'+line.strip(), 'r')
        except:
            print "Couldn't open profile %s" % ('data/'+line)
            sys.exit(2)

        job = brewJob()
        job.load_pfl('data/'+line.strip())

        profiles.append(job)

    for job in profiles:
        job.set_start_time(time.time())
        print "Starting ", job.get_pfl_name(), job.get_start_time()


def main_loop():
    while True:
        current_time = time.time()
        print "main loop: ", current_time

        # Obtain target temperature(s) for active profile(s)
        #
        for job in profiles:
            (job_done,target_temp) = job.target_temperature(current_time)
            print "At %f, %s target temp = %f" % (current_time-job.get_start_time(), job.get_pfl_name(), target_temp),
            if job_done:
                print "(COMPLETE)"
            else:
                print

        # Obtain actual temperatures from all probes
        #



        time.sleep(1)


if __name__ == '__main__':
    main_setup()
    main_loop()


# ex:set ai shiftwidth=4 inputtab=spaces smarttab noautotab:
